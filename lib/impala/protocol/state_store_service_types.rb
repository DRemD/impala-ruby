#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'statestore_types_types'
require 'status_types'
require 'types_types'


module Impala
  module Protocol
    module StateStoreServiceVersion
      V1 = 0
      VALUE_MAP = { 0 => "V1" }
      VALID_VALUES = Set.new([V1]).freeze
    end

    class TRegisterServiceRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROTOCOL_VERSION = 1
      SUBSCRIBER_ADDRESS = 2
      SERVICE_ID = 3
      SERVICE_ADDRESS = 4

      FIELDS = {
      PROTOCOL_VERSION => { :type => ::Thrift::Types::I32, :name => 'protocol_version', :default =>             0, :enum_class => Impala::Protocol::StateStoreServiceVersion },
      SUBSCRIBER_ADDRESS => { :type => ::Thrift::Types::STRUCT, :name => 'subscriber_address', :class => Impala::Protocol::THostPort, :optional => true },
      SERVICE_ID => { :type => ::Thrift::Types::STRING, :name => 'service_id', :optional => true },
      SERVICE_ADDRESS => { :type => ::Thrift::Types::STRUCT, :name => 'service_address', :class => Impala::Protocol::THostPort, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field protocol_version is unset!') unless @protocol_version
        unless @protocol_version.nil? || Impala::Protocol::StateStoreServiceVersion::VALID_VALUES.include?(@protocol_version)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field protocol_version!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TRegisterServiceResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUS = 1

      FIELDS = {
      STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'status', :class => Impala::Protocol::TStatus, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TUnregisterServiceRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROTOCOL_VERSION = 1
      SUBSCRIBER_ADDRESS = 2
      SERVICE_ID = 3

      FIELDS = {
      PROTOCOL_VERSION => { :type => ::Thrift::Types::I32, :name => 'protocol_version', :default =>             0, :enum_class => Impala::Protocol::StateStoreServiceVersion },
      SUBSCRIBER_ADDRESS => { :type => ::Thrift::Types::STRUCT, :name => 'subscriber_address', :class => Impala::Protocol::THostPort, :optional => true },
      SERVICE_ID => { :type => ::Thrift::Types::STRING, :name => 'service_id', :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field protocol_version is unset!') unless @protocol_version
        unless @protocol_version.nil? || Impala::Protocol::StateStoreServiceVersion::VALID_VALUES.include?(@protocol_version)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field protocol_version!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TUnregisterServiceResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUS = 1

      FIELDS = {
      STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'status', :class => Impala::Protocol::TStatus, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TRegisterSubscriptionRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROTOCOL_VERSION = 1
      SUBSCRIBER_ADDRESS = 2
      SERVICES = 3
      SUBSCRIPTION_ID = 4

      FIELDS = {
      PROTOCOL_VERSION => { :type => ::Thrift::Types::I32, :name => 'protocol_version', :default =>             0, :enum_class => Impala::Protocol::StateStoreServiceVersion },
      SUBSCRIBER_ADDRESS => { :type => ::Thrift::Types::STRUCT, :name => 'subscriber_address', :class => Impala::Protocol::THostPort, :optional => true },
      SERVICES => { :type => ::Thrift::Types::SET, :name => 'services', :element => { :type => ::Thrift::Types::STRING }, :optional => true },
      SUBSCRIPTION_ID => { :type => ::Thrift::Types::STRING, :name => 'subscription_id', :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field protocol_version is unset!') unless @protocol_version
        unless @protocol_version.nil? || Impala::Protocol::StateStoreServiceVersion::VALID_VALUES.include?(@protocol_version)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field protocol_version!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TRegisterSubscriptionResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUS = 1

      FIELDS = {
      STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'status', :class => Impala::Protocol::TStatus, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TUnregisterSubscriptionRequest
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROTOCOL_VERSION = 1
      SUBSCRIBER_ADDRESS = 2
      SUBSCRIPTION_ID = 3

      FIELDS = {
      PROTOCOL_VERSION => { :type => ::Thrift::Types::I32, :name => 'protocol_version', :default =>             0, :enum_class => Impala::Protocol::StateStoreServiceVersion },
      SUBSCRIBER_ADDRESS => { :type => ::Thrift::Types::STRUCT, :name => 'subscriber_address', :class => Impala::Protocol::THostPort, :optional => true },
      SUBSCRIPTION_ID => { :type => ::Thrift::Types::STRING, :name => 'subscription_id', :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field protocol_version is unset!') unless @protocol_version
        unless @protocol_version.nil? || Impala::Protocol::StateStoreServiceVersion::VALID_VALUES.include?(@protocol_version)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field protocol_version!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TUnregisterSubscriptionResponse
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUS = 1

      FIELDS = {
      STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'status', :class => Impala::Protocol::TStatus, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
