#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'exprs_types'


module Impala
  module Protocol
    module TPartitionType
      UNPARTITIONED = 0
      RANDOM = 1
      HASH_PARTITIONED = 2
      RANGE_PARTITIONED = 3
      VALUE_MAP = { 0 => "UNPARTITIONED", 1 => "RANDOM", 2 => "HASH_PARTITIONED", 3 => "RANGE_PARTITIONED" }
      VALID_VALUES = Set.new([UNPARTITIONED, RANDOM, HASH_PARTITIONED, RANGE_PARTITIONED]).freeze
    end

    class TDataPartition
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TYPE = 1
      PARTITIONING_EXPRS = 2

      FIELDS = {
      TYPE => { :type => ::Thrift::Types::I32, :name => 'type', :enum_class => Impala::Protocol::TPartitionType },
      PARTITIONING_EXPRS => { :type => ::Thrift::Types::LIST, :name => 'partitioning_exprs', :element => { :type => ::Thrift::Types::STRUCT, :class => Impala::Protocol::TExpr }, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field type is unset!') unless @type
        unless @type.nil? || Impala::Protocol::TPartitionType::VALID_VALUES.include?(@type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
