#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'status_types'
require 'types_types'
require 'exprs_types'
require 'descriptors_types'
require 'plan_nodes_types'
require 'planner_types'
require 'data_sinks_types'
require 'data_types'
require 'runtime_profile_types'
require 'impala_service_types'
require 'java_constants_types'


module Impala
  module Protocol
    module ImpalaInternalServiceVersion
      V1 = 0
      VALUE_MAP = { 0 => "V1" }
      VALID_VALUES = Set.new([V1]).freeze
    end

    class TQueryOptions
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ABORT_ON_ERROR = 1
      MAX_ERRORS = 2
      DISABLE_CODEGEN = 3
      BATCH_SIZE = 4
      RETURN_AS_ASCII = 5
      NUM_NODES = 6
      MAX_SCAN_RANGE_LENGTH = 7
      NUM_SCANNER_THREADS = 8
      MAX_IO_BUFFERS = 9
      ALLOW_UNSUPPORTED_FORMATS = 10
      DEFAULT_ORDER_BY_LIMIT = 11

      FIELDS = {
      ABORT_ON_ERROR => { :type => ::Thrift::Types::BOOL, :name => 'abort_on_error', :default => false },
      MAX_ERRORS => { :type => ::Thrift::Types::I32, :name => 'max_errors', :default => 0 },
      DISABLE_CODEGEN => { :type => ::Thrift::Types::BOOL, :name => 'disable_codegen', :default => false },
      BATCH_SIZE => { :type => ::Thrift::Types::I32, :name => 'batch_size', :default => 0 },
      RETURN_AS_ASCII => { :type => ::Thrift::Types::BOOL, :name => 'return_as_ascii', :default => true },
      NUM_NODES => { :type => ::Thrift::Types::I32, :name => 'num_nodes', :default => 0 },
      MAX_SCAN_RANGE_LENGTH => { :type => ::Thrift::Types::I64, :name => 'max_scan_range_length', :default => 0 },
      NUM_SCANNER_THREADS => { :type => ::Thrift::Types::I32, :name => 'num_scanner_threads', :default => 0 },
      MAX_IO_BUFFERS => { :type => ::Thrift::Types::I32, :name => 'max_io_buffers', :default => 0 },
      ALLOW_UNSUPPORTED_FORMATS => { :type => ::Thrift::Types::BOOL, :name => 'allow_unsupported_formats', :default => false },
      DEFAULT_ORDER_BY_LIMIT => { :type => ::Thrift::Types::I64, :name => 'default_order_by_limit', :default => -1, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field abort_on_error is unset!') if @abort_on_error.nil?
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field max_errors is unset!') unless @max_errors
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field disable_codegen is unset!') if @disable_codegen.nil?
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field batch_size is unset!') unless @batch_size
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field return_as_ascii is unset!') if @return_as_ascii.nil?
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_nodes is unset!') unless @num_nodes
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field max_scan_range_length is unset!') unless @max_scan_range_length
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field num_scanner_threads is unset!') unless @num_scanner_threads
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field max_io_buffers is unset!') unless @max_io_buffers
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field allow_unsupported_formats is unset!') if @allow_unsupported_formats.nil?
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TScanRangeParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SCAN_RANGE = 1
      VOLUME_ID = 2

      FIELDS = {
      SCAN_RANGE => { :type => ::Thrift::Types::STRUCT, :name => 'scan_range', :class => Impala::Protocol::TScanRange },
      VOLUME_ID => { :type => ::Thrift::Types::I32, :name => 'volume_id', :default => -1, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field scan_range is unset!') unless @scan_range
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TPlanFragmentDestination
      include ::Thrift::Struct, ::Thrift::Struct_Union
      FRAGMENT_INSTANCE_ID = 1
      SERVER = 2

      FIELDS = {
      FRAGMENT_INSTANCE_ID => { :type => ::Thrift::Types::STRUCT, :name => 'fragment_instance_id', :class => Impala::Protocol::TUniqueId },
      SERVER => { :type => ::Thrift::Types::STRUCT, :name => 'server', :class => Impala::Protocol::THostPort }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fragment_instance_id is unset!') unless @fragment_instance_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field server is unset!') unless @server
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TPlanFragmentExecParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      QUERY_ID = 1
      FRAGMENT_INSTANCE_ID = 2
      PER_NODE_SCAN_RANGES = 3
      PER_EXCH_NUM_SENDERS = 4
      DESTINATIONS = 5

      FIELDS = {
      QUERY_ID => { :type => ::Thrift::Types::STRUCT, :name => 'query_id', :class => Impala::Protocol::TUniqueId },
      FRAGMENT_INSTANCE_ID => { :type => ::Thrift::Types::STRUCT, :name => 'fragment_instance_id', :class => Impala::Protocol::TUniqueId },
      PER_NODE_SCAN_RANGES => { :type => ::Thrift::Types::MAP, :name => 'per_node_scan_ranges', :key => { :type => ::Thrift::Types::I32 }, :value => { :type => ::Thrift::Types::LIST, :element => { :type => ::Thrift::Types::STRUCT, :class => Impala::Protocol::TScanRangeParams } } },
      PER_EXCH_NUM_SENDERS => { :type => ::Thrift::Types::MAP, :name => 'per_exch_num_senders', :key => { :type => ::Thrift::Types::I32 }, :value => { :type => ::Thrift::Types::I32 } },
      DESTINATIONS => { :type => ::Thrift::Types::LIST, :name => 'destinations', :element => { :type => ::Thrift::Types::STRUCT, :class => Impala::Protocol::TPlanFragmentDestination } }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field query_id is unset!') unless @query_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field fragment_instance_id is unset!') unless @fragment_instance_id
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field per_node_scan_ranges is unset!') unless @per_node_scan_ranges
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field per_exch_num_senders is unset!') unless @per_exch_num_senders
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TQueryGlobals
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NOW_STRING = 1

      FIELDS = {
      NOW_STRING => { :type => ::Thrift::Types::STRING, :name => 'now_string' }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field now_string is unset!') unless @now_string
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TExecPlanFragmentParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROTOCOL_VERSION = 1
      FRAGMENT = 2
      DESC_TBL = 3
      PARAMS = 4
      COORD = 5
      BACKEND_NUM = 6
      QUERY_GLOBALS = 7
      QUERY_OPTIONS = 8

      FIELDS = {
      PROTOCOL_VERSION => { :type => ::Thrift::Types::I32, :name => 'protocol_version', :enum_class => Impala::Protocol::ImpalaInternalServiceVersion },
      FRAGMENT => { :type => ::Thrift::Types::STRUCT, :name => 'fragment', :class => Impala::Protocol::TPlanFragment, :optional => true },
      DESC_TBL => { :type => ::Thrift::Types::STRUCT, :name => 'desc_tbl', :class => Impala::Protocol::TDescriptorTable, :optional => true },
      PARAMS => { :type => ::Thrift::Types::STRUCT, :name => 'params', :class => Impala::Protocol::TPlanFragmentExecParams, :optional => true },
      COORD => { :type => ::Thrift::Types::STRUCT, :name => 'coord', :class => Impala::Protocol::THostPort, :optional => true },
      BACKEND_NUM => { :type => ::Thrift::Types::I32, :name => 'backend_num', :optional => true },
      QUERY_GLOBALS => { :type => ::Thrift::Types::STRUCT, :name => 'query_globals', :class => Impala::Protocol::TQueryGlobals, :optional => true },
      QUERY_OPTIONS => { :type => ::Thrift::Types::STRUCT, :name => 'query_options', :class => Impala::Protocol::TQueryOptions, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field protocol_version is unset!') unless @protocol_version
        unless @protocol_version.nil? || Impala::Protocol::ImpalaInternalServiceVersion::VALID_VALUES.include?(@protocol_version)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field protocol_version!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TExecPlanFragmentResult
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUS = 1

      FIELDS = {
      STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'status', :class => Impala::Protocol::TStatus, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TInsertExecStatus
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NUM_APPENDED_ROWS = 1
      FILES_TO_MOVE = 2

      FIELDS = {
      NUM_APPENDED_ROWS => { :type => ::Thrift::Types::MAP, :name => 'num_appended_rows', :key => { :type => ::Thrift::Types::STRING }, :value => { :type => ::Thrift::Types::I64 }, :optional => true },
      FILES_TO_MOVE => { :type => ::Thrift::Types::MAP, :name => 'files_to_move', :key => { :type => ::Thrift::Types::STRING }, :value => { :type => ::Thrift::Types::STRING } }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field files_to_move is unset!') unless @files_to_move
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TReportExecStatusParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROTOCOL_VERSION = 1
      QUERY_ID = 2
      BACKEND_NUM = 3
      FRAGMENT_INSTANCE_ID = 4
      STATUS = 5
      DONE = 6
      PROFILE = 7
      INSERT_EXEC_STATUS = 8
      ERROR_LOG = 9

      FIELDS = {
      PROTOCOL_VERSION => { :type => ::Thrift::Types::I32, :name => 'protocol_version', :enum_class => Impala::Protocol::ImpalaInternalServiceVersion },
      QUERY_ID => { :type => ::Thrift::Types::STRUCT, :name => 'query_id', :class => Impala::Protocol::TUniqueId, :optional => true },
      BACKEND_NUM => { :type => ::Thrift::Types::I32, :name => 'backend_num', :optional => true },
      FRAGMENT_INSTANCE_ID => { :type => ::Thrift::Types::STRUCT, :name => 'fragment_instance_id', :class => Impala::Protocol::TUniqueId, :optional => true },
      STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'status', :class => Impala::Protocol::TStatus, :optional => true },
      DONE => { :type => ::Thrift::Types::BOOL, :name => 'done', :optional => true },
      PROFILE => { :type => ::Thrift::Types::STRUCT, :name => 'profile', :class => Impala::Protocol::TRuntimeProfileTree, :optional => true },
      INSERT_EXEC_STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'insert_exec_status', :class => Impala::Protocol::TInsertExecStatus, :optional => true },
      ERROR_LOG => { :type => ::Thrift::Types::LIST, :name => 'error_log', :element => { :type => ::Thrift::Types::STRING }, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field protocol_version is unset!') unless @protocol_version
        unless @protocol_version.nil? || Impala::Protocol::ImpalaInternalServiceVersion::VALID_VALUES.include?(@protocol_version)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field protocol_version!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TReportExecStatusResult
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUS = 1

      FIELDS = {
      STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'status', :class => Impala::Protocol::TStatus, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TCancelPlanFragmentParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROTOCOL_VERSION = 1
      FRAGMENT_INSTANCE_ID = 2

      FIELDS = {
      PROTOCOL_VERSION => { :type => ::Thrift::Types::I32, :name => 'protocol_version', :enum_class => Impala::Protocol::ImpalaInternalServiceVersion },
      FRAGMENT_INSTANCE_ID => { :type => ::Thrift::Types::STRUCT, :name => 'fragment_instance_id', :class => Impala::Protocol::TUniqueId, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field protocol_version is unset!') unless @protocol_version
        unless @protocol_version.nil? || Impala::Protocol::ImpalaInternalServiceVersion::VALID_VALUES.include?(@protocol_version)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field protocol_version!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TCancelPlanFragmentResult
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUS = 1

      FIELDS = {
      STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'status', :class => Impala::Protocol::TStatus, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TTransmitDataParams
      include ::Thrift::Struct, ::Thrift::Struct_Union
      PROTOCOL_VERSION = 1
      DEST_FRAGMENT_INSTANCE_ID = 2
      DEST_NODE_ID = 4
      ROW_BATCH = 5
      EOS = 6

      FIELDS = {
      PROTOCOL_VERSION => { :type => ::Thrift::Types::I32, :name => 'protocol_version', :enum_class => Impala::Protocol::ImpalaInternalServiceVersion },
      DEST_FRAGMENT_INSTANCE_ID => { :type => ::Thrift::Types::STRUCT, :name => 'dest_fragment_instance_id', :class => Impala::Protocol::TUniqueId, :optional => true },
      DEST_NODE_ID => { :type => ::Thrift::Types::I32, :name => 'dest_node_id', :optional => true },
      ROW_BATCH => { :type => ::Thrift::Types::STRUCT, :name => 'row_batch', :class => Impala::Protocol::TRowBatch, :optional => true },
      EOS => { :type => ::Thrift::Types::BOOL, :name => 'eos', :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field protocol_version is unset!') unless @protocol_version
        unless @protocol_version.nil? || Impala::Protocol::ImpalaInternalServiceVersion::VALID_VALUES.include?(@protocol_version)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field protocol_version!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class TTransmitDataResult
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STATUS = 1

      FIELDS = {
      STATUS => { :type => ::Thrift::Types::STRUCT, :name => 'status', :class => Impala::Protocol::TStatus, :optional => true }
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end
