#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'state_store_service_types'

module Impala
  module Protocol
    module StateStoreService
      class Client
        include ::Thrift::Client

        def RegisterService(request)
          send_RegisterService(request)
          return recv_RegisterService()
        end

        def send_RegisterService(request)
          send_message('RegisterService', RegisterService_args, :request => request)
        end

        def recv_RegisterService()
          result = receive_message(RegisterService_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RegisterService failed: unknown result')
        end

        def UnregisterService(request)
          send_UnregisterService(request)
          return recv_UnregisterService()
        end

        def send_UnregisterService(request)
          send_message('UnregisterService', UnregisterService_args, :request => request)
        end

        def recv_UnregisterService()
          result = receive_message(UnregisterService_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'UnregisterService failed: unknown result')
        end

        def RegisterSubscription(request)
          send_RegisterSubscription(request)
          return recv_RegisterSubscription()
        end

        def send_RegisterSubscription(request)
          send_message('RegisterSubscription', RegisterSubscription_args, :request => request)
        end

        def recv_RegisterSubscription()
          result = receive_message(RegisterSubscription_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RegisterSubscription failed: unknown result')
        end

        def UnregisterSubscription(request)
          send_UnregisterSubscription(request)
          return recv_UnregisterSubscription()
        end

        def send_UnregisterSubscription(request)
          send_message('UnregisterSubscription', UnregisterSubscription_args, :request => request)
        end

        def recv_UnregisterSubscription()
          result = receive_message(UnregisterSubscription_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'UnregisterSubscription failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_RegisterService(seqid, iprot, oprot)
          args = read_args(iprot, RegisterService_args)
          result = RegisterService_result.new()
          result.success = @handler.RegisterService(args.request)
          write_result(result, oprot, 'RegisterService', seqid)
        end

        def process_UnregisterService(seqid, iprot, oprot)
          args = read_args(iprot, UnregisterService_args)
          result = UnregisterService_result.new()
          result.success = @handler.UnregisterService(args.request)
          write_result(result, oprot, 'UnregisterService', seqid)
        end

        def process_RegisterSubscription(seqid, iprot, oprot)
          args = read_args(iprot, RegisterSubscription_args)
          result = RegisterSubscription_result.new()
          result.success = @handler.RegisterSubscription(args.request)
          write_result(result, oprot, 'RegisterSubscription', seqid)
        end

        def process_UnregisterSubscription(seqid, iprot, oprot)
          args = read_args(iprot, UnregisterSubscription_args)
          result = UnregisterSubscription_result.new()
          result.success = @handler.UnregisterSubscription(args.request)
          write_result(result, oprot, 'UnregisterSubscription', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class RegisterService_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST = 1

        FIELDS = {
        REQUEST => { :type => ::Thrift::Types::STRUCT, :name => 'request', :class => Impala::Protocol::TRegisterServiceRequest }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterService_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
        SUCCESS => { :type => ::Thrift::Types::STRUCT, :name => 'success', :class => Impala::Protocol::TRegisterServiceResponse }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UnregisterService_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST = 1

        FIELDS = {
        REQUEST => { :type => ::Thrift::Types::STRUCT, :name => 'request', :class => Impala::Protocol::TUnregisterServiceRequest }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UnregisterService_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
        SUCCESS => { :type => ::Thrift::Types::STRUCT, :name => 'success', :class => Impala::Protocol::TUnregisterServiceResponse }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterSubscription_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST = 1

        FIELDS = {
        REQUEST => { :type => ::Thrift::Types::STRUCT, :name => 'request', :class => Impala::Protocol::TRegisterSubscriptionRequest }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class RegisterSubscription_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
        SUCCESS => { :type => ::Thrift::Types::STRUCT, :name => 'success', :class => Impala::Protocol::TRegisterSubscriptionResponse }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UnregisterSubscription_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        REQUEST = 1

        FIELDS = {
        REQUEST => { :type => ::Thrift::Types::STRUCT, :name => 'request', :class => Impala::Protocol::TUnregisterSubscriptionRequest }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class UnregisterSubscription_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
        SUCCESS => { :type => ::Thrift::Types::STRUCT, :name => 'success', :class => Impala::Protocol::TUnregisterSubscriptionResponse }
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
